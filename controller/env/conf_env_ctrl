#!/bin/bash

source ../../servers
source ../../services

chrony() {
  echo "======================================================="
  echo "[OSTACK] Configure NTP chrony"
  echo "======================================================="

  if [[ -d /etc/chrony ]]; then
    echo "[OStack] Chrony found.."
    if [[ -f /etc/chrony/chrony.conf.ori ]]; then
      echo "[OSTACK] Creating temporary configuration backup.."
      cp /etc/chrony/chrony.conf /etc/chrony/chrony.conf.bak

      echo "[OSTACK] Restoring to original configuration.."
      cp /etc/chrony/chrony.conf.ori /etc/chrony/chrony.conf

      echo "[OSTACK] Configuring to NTP server.."
      cat >> /etc/chrony/chrony.conf <<EOF

# server NTP its
server ${NTP_SERVER} iburst

# Openstack network
allow ${LOCAL_NET}/24

EOF
    else
      echo "[OSTACK] Creating original configuration backup.."
      cp /etc/chrony/chrony.conf /etc/chrony/chrony.conf.ori

      echo "[OSTACK] Configuring to NTP server.."
      cat >> /etc/chrony/chrony.conf <<EOF

# server NTP its
server ${NTP_SERVER} iburst

# Openstack network
allow ${LOCAL_NET}/24

EOF
    fi

    echo "[OSTACK] Restarting chrony.."
    service chrony restart

    echo "[OSTACK] Done."
    config_db
  else
    echo "[OSTACK] Chrony is not installed. Execute `dep_conf_env_controller` first.. "
    echo "[OSTACK] Abort."
    exit
  fi
}

config_db() {
  echo "======================================================="
  echo "[OSTACK] Configure database"
  echo "======================================================="

  if [[ -d /etc/mysql ]]; then
    echo "[OSTACK] MySQL found.."
    if [[ -f /etc/mysql/conf.d/openstack.cnf ]]; then
      echo "[OSTACK] Backup current configuration.."
      cp /etc/mysql/conf.d/openstack.cnf /etc/mysql/conf.d/openstack.cnf.bak

      echo "[OSTACK] Creating openstack mysql configuration for openstack.."
      cat > /etc/mysql/conf.d/openstack.cnf <<EOF
[mysqld]
bind-address = ${IP_ADDR0_ETH0}

default-storage-engine = innodb
innodb_file_per_table
max_connections = 4096
collation-server = utf8_general_ci
character-set-server = utf8

EOF
    else
      echo "[OSTACK] Creating openstack mysql configuration for openstack.."
      cat > /etc/mysql/conf.d/openstack.cnf <<EOF
[mysqld]
bind-address = ${IP_ADDR0_ETH0}

default-storage-engine = innodb
innodb_file_per_table
max_connections = 4096
collation-server = utf8_general_ci
character-set-server = utf8

EOF
    fi

    echo "[OSTACK] Restarting MySQL.."
    service mysql restart

    echo "[OSTACK] Done."
    rabbit_mq
  else
    echo "[OSTACK] MySQL is not installed. Execute `dep_conf_env_controller` first.. "
    echo "[OSTACK] Abort."
    exit
  fi
}

rabbit_mq() {
  echo "======================================================="
  echo "[OSTACK] Configure rabbitmq-server"
  echo "======================================================="

  if [[ -d /etc/rabbitmq ]]; then
    echo "[OSTACK] Rabbitmq-server found.."

    echo "[OSTACK] Adding openstack as rabbit user.."
    rabbitmqctl add_user openstack ${MQ_PASS}

    echo "[OSTACK] Granting openstack permission.."
    rabbitmqctl set_permissions openstack ".*" ".*" ".*"

    echo "[OSTACK] restart rabbitmq-server.."
    service rabbitmq-server restart

    echo "[OSTACK] Done."
    memcached
  else
    echo "[OSTACK] Rabbitmq-server is not installed. Execute `dep_conf_env_controller` first.. "
    echo "[OSTACK] Abort."
    exit
  fi
}

memcached() {
  echo "======================================================="
  echo "[OSTACK] Configure memcached"
  echo "======================================================="

  if [[ -f /etc/memcached.conf ]]; then
    echo "[OSTACK] Memcached found.."

    echo "[OSTACK] Configuring and backup memcached.."
    sed -i.bak -e "35d" /etc/memcached.conf
    sed -i "35i -l ${IP_ADDR0_ETH0}" /etc/memcached.conf

    echo "[OSTACK] Configuring and backup memcached.."
    service memcached restart

    echo "[OSTACK] Finish."
  else
    echo "[OSTACK] Memcached is not installed. Execute `dep_conf_env_controller` first.. "
    echo "[OSTACK] Abort."
    exit
  fi
}

echo "[OSTACK] CONFIGURING '${SERVICE_NAME0}' ON '$(hostname)'.."
chrony
